import pytest
from invenio_records_resources.services.errors import PermissionDeniedError
from invenio_requests.records.api import RequestEvent, RequestEventFormat
from invenio_requests.customizations.event_types import CommentEventType

{% for request, request_data in requests.items() %}
from {{ python.requests_types }} import {{ request_data.type_class }}
{% endfor %}
from {{ python.proxies_current_service|package_name }} import {{ python.proxies_current_service|base_name }}

{% for request, request_data in requests.items() %}
def test_{{ request }}_request(app, identity_simple, identity_simple_2, submit_request, request_events_service,
                         requests_service, {{ python.record_prefix_snake }}, users, request_record_input_data):

    request = submit_request(identity_simple, data=request_record_input_data, topic={{ python.record_prefix_snake }},
                             request_type={{ request_data.type_class }}, receiver=users[1])
    #assert {{ python.proxies_current_service|base_name }}.read(identity_simple, {{ python.record_prefix_snake }}["id"])["metadata"][
    #           "status"] == "not approved"
    request_id = request.id

    # approve request by receiver
    payload = {
        "payload": {
            "content": "Ok doc1 is good enough and therefore approved.",
            "format": RequestEventFormat.HTML.value,
        }
    }
    # the sender can't approve the request
    with pytest.raises(PermissionDeniedError):
        requests_service.execute_action(identity_simple, request_id, "accept", payload)
    # the reciever can
    approve_response = requests_service.execute_action(identity_simple_2, request_id, "accept", payload)
    #assert {{ python.proxies_current_service|base_name }}.read(identity_simple, {{ python.record_prefix_snake }}["id"])["metadata"][
    #           "status"] == "approved"
    request = approve_response._request
    RequestEvent.index.refresh()

    assert "accepted" == request.status
    events = request_events_service.search(identity_simple, request_id)
    assert 3 == events.total  # two comments and accept log
    hits = list(events.hits)
    assert CommentEventType.type_id == hits[0]["type"]
    assert "Can you approve my document doc1 please?" == hits[0]["payload"]["content"]
    assert "Ok doc1 is good enough and therefore approved." == hits[2]["payload"]["content"]
{% endfor %}